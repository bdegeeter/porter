// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: porter/v1alpha1/porter.proto

package porterv1alpha1

import (
	context "context"
	v1alpha1 "get.porter.sh/porter/gen/proto/go/porterapis/installation/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PorterClient is the client API for Porter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PorterClient interface {
	// Returns a list of all installations
	ListInstallations(ctx context.Context, in *v1alpha1.ListInstallationsRequest, opts ...grpc.CallOption) (*v1alpha1.ListInstallationsResponse, error)
	// Returns a list of all runs for a single installation
	ListInstallationRuns(ctx context.Context, in *v1alpha1.ListInstallationRunsRequest, opts ...grpc.CallOption) (*v1alpha1.ListInstallationRunsResponse, error)
	// Returns a list of all outputs for a single installation run
	// Must support a "latest" if no run id specified
	ListInstallationRunOutputs(ctx context.Context, in *v1alpha1.ListInstallationRunOutputRequest, opts ...grpc.CallOption) (*v1alpha1.ListInstallationRunOutputResponse, error)
}

type porterClient struct {
	cc grpc.ClientConnInterface
}

func NewPorterClient(cc grpc.ClientConnInterface) PorterClient {
	return &porterClient{cc}
}

func (c *porterClient) ListInstallations(ctx context.Context, in *v1alpha1.ListInstallationsRequest, opts ...grpc.CallOption) (*v1alpha1.ListInstallationsResponse, error) {
	out := new(v1alpha1.ListInstallationsResponse)
	err := c.cc.Invoke(ctx, "/porter.v1alpha1.Porter/ListInstallations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *porterClient) ListInstallationRuns(ctx context.Context, in *v1alpha1.ListInstallationRunsRequest, opts ...grpc.CallOption) (*v1alpha1.ListInstallationRunsResponse, error) {
	out := new(v1alpha1.ListInstallationRunsResponse)
	err := c.cc.Invoke(ctx, "/porter.v1alpha1.Porter/ListInstallationRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *porterClient) ListInstallationRunOutputs(ctx context.Context, in *v1alpha1.ListInstallationRunOutputRequest, opts ...grpc.CallOption) (*v1alpha1.ListInstallationRunOutputResponse, error) {
	out := new(v1alpha1.ListInstallationRunOutputResponse)
	err := c.cc.Invoke(ctx, "/porter.v1alpha1.Porter/ListInstallationRunOutputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PorterServer is the server API for Porter service.
// All implementations must embed UnimplementedPorterServer
// for forward compatibility
type PorterServer interface {
	// Returns a list of all installations
	ListInstallations(context.Context, *v1alpha1.ListInstallationsRequest) (*v1alpha1.ListInstallationsResponse, error)
	// Returns a list of all runs for a single installation
	ListInstallationRuns(context.Context, *v1alpha1.ListInstallationRunsRequest) (*v1alpha1.ListInstallationRunsResponse, error)
	// Returns a list of all outputs for a single installation run
	// Must support a "latest" if no run id specified
	ListInstallationRunOutputs(context.Context, *v1alpha1.ListInstallationRunOutputRequest) (*v1alpha1.ListInstallationRunOutputResponse, error)
	mustEmbedUnimplementedPorterServer()
}

// UnimplementedPorterServer must be embedded to have forward compatible implementations.
type UnimplementedPorterServer struct {
}

func (UnimplementedPorterServer) ListInstallations(context.Context, *v1alpha1.ListInstallationsRequest) (*v1alpha1.ListInstallationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstallations not implemented")
}
func (UnimplementedPorterServer) ListInstallationRuns(context.Context, *v1alpha1.ListInstallationRunsRequest) (*v1alpha1.ListInstallationRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstallationRuns not implemented")
}
func (UnimplementedPorterServer) ListInstallationRunOutputs(context.Context, *v1alpha1.ListInstallationRunOutputRequest) (*v1alpha1.ListInstallationRunOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstallationRunOutputs not implemented")
}
func (UnimplementedPorterServer) mustEmbedUnimplementedPorterServer() {}

// UnsafePorterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PorterServer will
// result in compilation errors.
type UnsafePorterServer interface {
	mustEmbedUnimplementedPorterServer()
}

func RegisterPorterServer(s grpc.ServiceRegistrar, srv PorterServer) {
	s.RegisterService(&Porter_ServiceDesc, srv)
}

func _Porter_ListInstallations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1alpha1.ListInstallationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorterServer).ListInstallations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/porter.v1alpha1.Porter/ListInstallations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorterServer).ListInstallations(ctx, req.(*v1alpha1.ListInstallationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Porter_ListInstallationRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1alpha1.ListInstallationRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorterServer).ListInstallationRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/porter.v1alpha1.Porter/ListInstallationRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorterServer).ListInstallationRuns(ctx, req.(*v1alpha1.ListInstallationRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Porter_ListInstallationRunOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1alpha1.ListInstallationRunOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PorterServer).ListInstallationRunOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/porter.v1alpha1.Porter/ListInstallationRunOutputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PorterServer).ListInstallationRunOutputs(ctx, req.(*v1alpha1.ListInstallationRunOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Porter_ServiceDesc is the grpc.ServiceDesc for Porter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Porter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "porter.v1alpha1.Porter",
	HandlerType: (*PorterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInstallations",
			Handler:    _Porter_ListInstallations_Handler,
		},
		{
			MethodName: "ListInstallationRuns",
			Handler:    _Porter_ListInstallationRuns_Handler,
		},
		{
			MethodName: "ListInstallationRunOutputs",
			Handler:    _Porter_ListInstallationRunOutputs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "porter/v1alpha1/porter.proto",
}
